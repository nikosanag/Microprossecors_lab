#define F_CPU 16000000UL

#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
#include<stdbool.h>

// Rerurns true if a connected device is found (PD4 = 0)
bool one_wire_reset()
{
    DDRD = 0x10;            // Set PD4 as output
    PORTD = 0x00;           // Clear PD4
    _delay_us(480);         // Delay 480 usec
    
    DDRD = 0x00;            // Set PD4 as input
    PORTD = 0x00;           // Disable pull-up resistor
    _delay_ms(100);         // Delay 100 usec
    
    uint8_t input = PIND;   // Read input
    _delay_us(380);         // Delay 380 usec
    
    // If device is detected (PD4 = 0) -> return true
    if ((input & 0x10) == 0x10) {return false;} // PD4 = 1
    return true;                                // PD4 = 0
}


uint8_t one_wire_receive_bit()
{
    DDRD = 0x10;                        // Set PD4 as output
    PORTD = 0x00;                       // Clear PD4
    _delay_us(2);                       // Delay 2 usec 
    
    DDRD = 0x00;                        // Set PD4 as input
    PORTD = 0x00;                       // Disable pull-up resistor
    _delay_us(10);                      // Delay 10 usec
    
    uint8_t bit_to_receive = PIND;      // Read the PD4
    _delay_us(49);                      // Delay 49 usec
    
    // If PD4 is set, return 0x01
    if ((bit_to_receive & 0x10) == 0x10) {return 0x01;}
    
    return 0x00;
}

void one_wire_transmit_bit(uint8_t bit_to_transmit)
{
    DDRD = 0x10;                        // Set PD4 as output
    PORTD = 0x00;                       // Clear PD4
    _delay_us(2);                       // Delay 2 usec 
    
    PORTD = (bit_to_transmit & 0x10);   // Send PD4 bit to connected device
    _delay_us(58);                      // Delay 58 usec
    
    DDRD = 0x00;                        // Set PD4 as input
    PORTD = 0x00;                       // Disable pull-up resistor
    _delay_us(1);                       // Delay 1 usec
    return;
}

uint8_t one_wire_receive_byte()
{
    uint8_t received_byte = 0x00;       // Store the byte (8-bit) we received
    for (uint8_t i = 0; i < 8; i++)
    {
        uint8_t received_bit = one_wire_receive_bit();
        received_byte = received_byte >> 1;             // Logical shift right
        received_byte |= received_bit;                  // Logical OR to insert new bit into byte sequence
    }
    return received_byte;
}

void one_wire_transmit_byte(uint8_t byte_to_transmit)
{
    for (uint8_t i = 0; i < 8; i++)
    {
        uint8_t send_bit = (byte_to_transmit >> i) & 0x01;// Bit to transmit now in position bit 0
        one_wire_transmit_bit(send_bit);
    }
    return;
}

int GetTemperature()
{
    bool connected_device = one_wire_reset();   // Check for connected device
    if (!connected_device) return 0x8000;       // Error in connection return 0x8000
    
    one_wire_transmit_byte(0xCC);               // Only one device 
    one_wire_transmit_byte(0x44);               // Begin counting temperature
    
    while (one_wire_receive_bit() == 0x01);     // Wait until the above counting terminates
    
    one_wire_reset();                           // Re-initialize
    one_wire_transmit_byte(0xCC);
    one_wire_transmit_byte(0xBE);               // Read 16-bit result of temperature value
    
    uint16_t temperature = 0;
    temperature |= one_wire_receive_byte();     // 8-bit LSB of the total 16-bit value
    // Shift the 8-bit value 8 times to the left, OR with the previous 8-bit value
    // And take the temperature value of 16-bit
    temperature |= ((uint16_t)one_wire_receive_byte() << 8);  
    
    return temperature;
}

int main(void)
{
    while(1)
    {
        float temperature = ~GetTemperature()+ 1;// Because its value is complement of 2
        _delay_ms(1);
    }
    return;
}
