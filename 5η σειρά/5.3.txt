#define F_CPU 16000000UL  // 16 MHz

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdint.h>
#include <stdbool.h>

#define PCA9555_0_ADDRESS 0x40      // A0=A1=A2=0 by hardware
#define TWI_READ 1                  // reading from twi device
#define TWI_WRITE 0                 // writing to twi device
#define SCL_CLOCK 100000L           // twi clock in Hz

//Fscl=Fcpu/(16+2*TWBR0_VALUE*PRESCALER_VALUE)
#define TWBR0_VALUE ((F_CPU/SCL_CLOCK)-16)/2

// PCA9555 REGISTERS
typedef enum {
    REG_INPUT_0 = 0,
    REG_INPUT_1 = 1,
    REG_OUTPUT_0 = 2,
    REG_OUTPUT_1 = 3,
    REG_POLARITY_INV_0 = 4,
    REG_POLARITY_INV_1 = 5,
    REG_CONFIGURATION_0 = 6,
    REG_CONFIGURATION_1 = 7,
} PCA9555_REGISTERS;

//----------- Master Transmitter/Receiver -------------------
#define TW_START 0x08
#define TW_REP_START 0x10

//---------------- Master Transmitter ----------------------
#define TW_MT_SLA_ACK 0x18
#define TW_MT_SLA_NACK 0x20
#define TW_MT_DATA_ACK 0x28

//---------------- Master Receiver ----------------
#define TW_MR_SLA_ACK 0x40
#define TW_MR_SLA_NACK 0x48
#define TW_MR_DATA_NACK 0x58

#define TW_STATUS_MASK 0b11111000
#define TW_STATUS (TWSR0 & TW_STATUS_MASK)

//initialize TWI clock
void twi_init(void)
{
    TWSR0 = 0;              // PRESCALER_VALUE=1
    TWBR0 = TWBR0_VALUE;    // SCL_CLOCK 100KHz
}

// Read one byte from the twi device (request more data from device)
unsigned char twi_readAck(void)
{
    TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    while(!(TWCR0 & (1<<TWINT)));   // Wait till TW1 sends ACK back, means job done
    return TWDR0;
}

// Issues a start condition and sends address and transfer direction.
// return 0 = device accessible, 1= failed to access device
unsigned char twi_start(unsigned char address)
{
    uint8_t twi_status;
    // send START condition
    TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    // wait until transmission completed
    while(!(TWCR0 & (1<<TWINT)));
    // check value of TWI Status Register.
    twi_status = TW_STATUS & 0xF8;
    if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) return 1;
    // send device address
    TWDR0 = address;
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    // wail until transmission completed and ACK/NACK has been received
    while(!(TWCR0 & (1<<TWINT)));
    // check value of TWI Status Register.
    twi_status = TW_STATUS & 0xF8;
    if ( (twi_status != TW_MT_SLA_ACK) && (twi_status != TW_MR_SLA_ACK) )
    {
        return 1; // failed to access device
    }
    return 0;
}

// Send start condition, address, transfer direction.
// Use ACK polling to wait until device is ready
void twi_start_wait(unsigned char address)
{
    uint8_t twi_status;
    while (1)
    {
        // send START condition
        TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
        
        // wait until transmission completed
        while(!(TWCR0 & (1<<TWINT)));
        
        // check value of TWI Status Register.
        twi_status = TW_STATUS & 0xF8;
        if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) continue;
        
        // send device address
        TWDR0 = address;
        TWCR0 = (1<<TWINT) | (1<<TWEN);
        
        // wail until transmission completed
        while(!(TWCR0 & (1<<TWINT)));
        
        // check value of TWI Status Register.
        twi_status = TW_STATUS & 0xF8;
        if ((twi_status == TW_MT_SLA_NACK )||(twi_status ==TW_MR_DATA_NACK))
        {
            /* device busy, send stop condition to terminate write operation */
            TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
            
            // wait until stop condition is executed and bus released
            while(TWCR0 & (1<<TWSTO));
            
            continue;
        }
        break;
    }
}

// Send one byte to twi device, Return 0 if write successful or 1 if write failed
unsigned char twi_write(unsigned char data)
{
    // send data to the previously addressed device
    TWDR0 = data;
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    // wait until transmission completed
    
    while(!(TWCR0 & (1<<TWINT)));
    if((TW_STATUS & 0xF8) != TW_MT_DATA_ACK) return 1; // write failed
    return 0;
}

// Send repeated start condition, address, transfer direction
//Return: 0 device accessible
// 1 failed to access device
unsigned char twi_rep_start(unsigned char address)
{
    return twi_start(address); // Restarts communication with the given address
}

// Terminates the data transfer and releases the twi bus
void twi_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    // wait until stop condition is executed and bus released
    while(TWCR0 & (1<<TWSTO));
}

// Reads a byte without acknowledgment (usually the last byte)
unsigned char twi_readNak(void)
{
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    while(!(TWCR0 & (1<<TWINT)));
    
    return TWDR0;
}

// Writes a value to a specified register in the PCA9555
void PCA9555_0_write(PCA9555_REGISTERS reg, uint8_t value)
{
    twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
    twi_write(reg);     // reg determines where the data will be stored
    twi_write(value);   // The data to be written
    twi_stop();         // Ending communication with the PCA9555
}

// Reads a value from a specified PCA9555 register
// This function needs to switch between write and read modes to set up register address
uint8_t PCA9555_0_read(PCA9555_REGISTERS reg)
{
    uint8_t ret_val;
    
    // Begin the communication with the PCA9555_0_ADDRESS
    // This initial write operation is necessary to set the internal register 
    // pointer to the target register from which we want to read
    twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
    twi_write(reg); // This tells the device which register will be read next
    
    // Now we call the function being in read mode
    // This sends a repeated START condition, which allows the microcontroller 
    // to read from the previously addressed device without releasing the bus.
    twi_rep_start(PCA9555_0_ADDRESS + TWI_READ);
    
    // Read one byte of data from the PCA9555, which is the content of the register we selected earlier
    ret_val = twi_readNak(); // It sends NAK indicating to PCA9555 that this is the final byte we wanna read
    twi_stop(); // Ending the communication and releasing the bus
    
    return ret_val; // Returns the value stored in the predifined register of PCA9555
} 

#define LCD_CLEAR 0x01          // Clear display
#define LCD_DISPLAY_ON 0x0C     // Display ON/OFF control
#define MODE_8_BIT_INIT 0x03
#define MODE_4_BIT_SWITCH 0x20
#define INCREMENT_CURSOR 0x06

void send_lcd_data(uint8_t data)
{
    // Send the upper nibble (4 bits)
    PCA9555_0_write(REG_OUTPUT_0, (data & 0xF0) | 0x05); // RS=1, RW=0, E=1
    _delay_us(1);  // Enable pulse width
    PCA9555_0_write(REG_OUTPUT_0, (data & 0xF0));        // E=0
    _delay_us(200);

    // Send the lower nibble (4 bits)
    PCA9555_0_write(REG_OUTPUT_0, ((data << 4) & 0xF0) | 0x05); // RS=1, RW=0, E=1
    _delay_us(1);  // Enable pulse width
    PCA9555_0_write(REG_OUTPUT_0, ((data << 4) & 0xF0));        // E=0
    _delay_ms(2);  // Data hold time
    return;
}

void send_lcd_command(uint8_t cmd)
{
    // Send the upper nibble (4 bits)
    // This bitwise OR operation is used to set the E (Enable) line high, 
    // while RS (Register Select) is low and RW (Read/Write) is low
    PCA9555_0_write(REG_OUTPUT_0, (cmd & 0xF0) | 0x04); // RS=0, RW=0, E=1
    _delay_us(1);  // Enable pulse width
    PCA9555_0_write(REG_OUTPUT_0, (cmd & 0xF0));        // E=0
    _delay_us(200);

    // Send the lower nibble (4 bits)
    PCA9555_0_write(REG_OUTPUT_0, ((cmd << 4) & 0xF0) | 0x04); // RS=0, RW=0, E=1
    _delay_us(1);  // Enable pulse width
    PCA9555_0_write(REG_OUTPUT_0, ((cmd << 4) & 0xF0));        // E=0
    _delay_ms(2);  // Command execution time
    return;
}

void lcd_init() {
    _delay_ms(200);

    // Send 0x30 command to set 8-bit mode (three times)
    for (int i = 0; i < 3; i++)
    {
        send_lcd_command(MODE_8_BIT_INIT);
        _delay_ms(5);
    }
    
    // Send 0x20 command to switch to 4-bit mode
    send_lcd_command(MODE_4_BIT_SWITCH);
    
    // Set 4-bit mode, 2 lines, 5x8 dots
    send_lcd_command(0x28);

    // Display ON, Cursor OFF
    send_lcd_command(LCD_DISPLAY_ON);

    // Clear display
    send_lcd_command(LCD_CLEAR);     

    // Entry mode: Increment cursor, no display shift
    send_lcd_command(INCREMENT_CURSOR);
}

void lcd_PrintString(const char* str)
{
    while(*str)
    {
        send_lcd_data(*str++);
    }
}

int main ()
{
    twi_init();     // Initialize TWI
    lcd_init();     // Initialize LCD
    
    lcd_PrintString("MY NAME IS");
    
    while(1){}
}