.include "m328pbdef.inc"
.equ FOSC_MHZ = 16		; Microcontroller operating frequency in MHz
.equ DEL_mS = 500		; Delay in mS (valid number from 1 to 4095)
.equ DEL_NU = FOSC_MHZ * DEL_mS ; delay_mS routine: (1000*DEL_NU+6) cycles
.equ delay_for_int1 = FOSC_MHZ * 5 ; 5msec
    
.def counter = r16		; counter for external interrupts

.org 0x0
rjmp reset
    
.org 0x4
rjmp isr1
    
reset:
    ; stack initialisation
    ldi r24,LOW(RAMEND)
    out SPL,r24
    ldi r24,HIGH(RAMEND)
    out SPH,r24
    clr r24

    ; PORTs initialisation
    ser r26
    out DDRB, r26		; init PORTB as output
    
    ser r26
    out DDRC, r26		; init PORTC as output
    
    clr r26
    out DDRD, r26		; init PORTB as input
    
    
    ;Interrupt on rising edge of INT1 pin
    ldi r24, (1 << ISC11) | (1 << ISC10)
    sts EICRA, r24
    
    ;Enable the INT1 interrupt
    ldi r24, (1 << INT1)
    out EIMSK, r24
    
    sei				; Enable general flag of interrupts
    
    clr r24
    
    ldi counter, 0		; initialize counter for interrupts
    
    
loop1:
    clr r26
loop2:
    out PORTB, r26
    
    ldi r24, low(DEL_NU)
    ldi r25, high(DEL_NU)	; set delay (number of cycles)
    rcall delay_mS		; 3 cycles
    
    inc r26
    
    cpi r26, 16			; compare r16 with 16
    breq loop1
    rjmp loop2
    
    
; delay of 1000*F1+6 cycles (almost equal to 1000*F1 cycles)
delay_mS:
    
    ldi r23, 249		; 1 cycle
loop_inn:
    dec r23			; 1 cycle
    nop				; 1 cycle
    brne loop_inn		; 2 cycles (1 cycle at the end)
    ; till here we have (248*4 + 3) + 1 cycles = 996 cycles
    
    sbiw r24, 1			; 2 cycles
    brne delay_mS		; 2 cycles (1 cycle at the end)
    ; till here we have (r24-1)*(4+996) + (3+996) cycles
    
    ret				; 4 cycles
    ; (r24-1)*1000 + 1003 cycles ~ r24*1000

;External interrupt 1 service routine
isr1:
    push r23
    push r24
    push r25
    push r26

    in r25, SREG
    push r25			; save r23, r24, r25, r26, SREG to stack
    
    ; -----------------------------------------------------------
    ; get rid of bounce phenomenon (B)
    clear_flag:
	ldi r24, (1 << INTF1)
	out EIFR, r24		; Clear external interrupt 0 flag
    
	ldi r24, low(delay_for_int1)
	ldi r25, high(delay_for_int1); set delay (number of cycles)
	rcall delay_mS		; delay 5msec
    
	; check if EIFR.1 1st bit is zero
	; if yes, then skip the next operation (jmp or rjmp) 
	; and continue with the interruption routine
	sbic EIFR, 1		
	jmp clear_flag		; 3 cycles
	;rjmp clear_flag	; 2 cycles
    ;------------------------------------------------------------
    
    in r26, PIND		; Read the state of PORTD
    sbrs r26, 5			; Skip the next instruction if PD5 is set
    rjmp dont_count		; Jump to 'dont_count'
    
    inc counter			; Increase counter
    cpi counter, 63		; If counter > 63, reset
    breq reset
  
dont_count:
    out PORTC, counter		; if counter < 63, print the answer

    
    ; Retrieve r23, r24, r25, r26, SREG from stack
    pop r25
    out SREG, r25
    pop r26
    pop r25
    pop r24
    pop r23
    
    reti			; Return from interrupt
