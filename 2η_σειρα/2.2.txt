.include "m328pbdef.inc"
.equ M = 16 ; Mhz
.equ req = 2000 ;requested msec
.def counter = r17
.def critical = r31
.def neuron = r30
.def final = r29
.def counter1 = r28
    
    
    .org 0x0
    rjmp reset
    .org 0x2
    rjmp handler_INT0
    
    
    
    reset:
    ;stack initialisation
    ldi r24,LOW(RAMEND)
    out SPL,r24
    ldi r24,HIGH(RAMEND)
    out SPH,r24
    
    
    clr r24
    clr r25
    
    
    ;setting PORTC as input
    ser r16
    out DDRC,r16
    clr r16
    ;PINB as inputs
    out DDRB,r16
    out DDRD,r16
    
    
    
    ldi r16,0
    STS EICRA,r16
    ldi r16,1
    out EIMSK,r16
    clr r16
  
    
    
    
    ;timer initialisation
    ldi r24,LOW(req)
    ldi r25,HIGH(req)
    
  
    
    sei
    loop:
    
    clr counter
    
    main:
   
    out PORTC,counter
    rcall wait_x_msec
    inc counter
    cpi counter,32
    brne main
    rjmp loop
    
    
    handler_INT0:
    IN R1,SREG
    PUSH R1
    rcall handler_0_brain    
    andi final,0x0F
    out PORTC,final
    POP R1
    OUT SREG,R1
    reti

    
    handler_0_brain:
    in critical,PINB
    com critical
    andi critical,0x0F
    clr final
    clr counter1 ;will count up to four times
    rcall first_bit_setup
    ret
    
    
    first_bit_setup:
    mov neuron,critical
    andi neuron,0x01
    or final,neuron
    inc counter1
    cpi counter1,4
    breq log_out
    cpi neuron,0x01
    breq second_bit_setup
    lsr critical
    rjmp first_bit_setup
    

    second_bit_setup:
    mov neuron,critical
    andi neuron,0x02
    or final,neuron
    inc counter1
    cpi counter1,4
    breq log_out
    cpi neuron,0x02
    breq third_bit_setup
    lsr critical
    rjmp second_bit_setup



    third_bit_setup:
    mov neuron,critical
    andi neuron,0x04
    or final,neuron
    inc counter1
    cpi counter1,4
    breq log_out
    cpi neuron,0x04
    breq fourth_bit_setup
    lsr critical
    rjmp third_bit_setup

    
    fourth_bit_setup:
    mov neuron,critical
    andi neuron,0x08
    or final,neuron
    out PORTC,final
    log_out:
    ret
    


    
    
    
    
    
    
    
    ;loop
    wait_x_msec:
    ldi r26,LOW(15984);1 cycle
    ldi r27,HIGH(15984);1 cycle
    helper:
	sbiw r26,4 ;2 cycles
	brne helper ;2 cycles or 1 cycle for the last iteration
    ;15984 -> helper consumes 15983 cycles
    ;so after helper we consume totally 15985 cycles

    sbiw r24,1 ;2 cycle
    breq last_msec ;1 cycle but if last msec 2 cycles

    ;for all msec except from the last -> 15985 + 2 + 1 = 15988 cycles

    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop ;10 cycles

    ;extra 10 cycles -> 15998

    brne wait_x_msec ;2 cycles total 16000 cycles with this operation

    last_msec:
    ;in the last iteration (last msec) we have 15989 cycles
    nop
    nop
    ;nop
    ;nop

    ;we need the following two because we decrease them till zero 
    ;and we need to refresh them for the next iteration
    ldi r24,LOW(req)
    ldi r25,HIGH(req)

    ;extra 4 cycles -> 15993 cycles 
    ret ;4 cycles

    ;with ret and rcall we calculated exactly 16000 cycles again
    ;so in both cases we end up having 16000 cycles -> 1 msec * (desired time) 







