.include "m328pbdef.inc"
.equ FOSC_MHZ = 16		; Microcontroller operating frequency in MHz
.equ DEL_mS = 500		; Delay in mS (valid number from 1 to 4095)
.equ DEL_NU = FOSC_MHZ * DEL_mS ; _delay_mS routine: (1000*DEL_NU+6) cycles

.equ req = 300			;requested msec
    
.def DC_VALUE = r16		; For Duty Cycle, the index for the correct position in table
    
.org 0x0
    rjmp reset
      
reset:
    OCR_table:
    .db 0x05, 0x1A, 0x2E, 0x43, 0x57, 0x6C, 0x80, 0x94, 0xA7, 0xBD, 0xD2, 0xE6, 0xFB
    
    ; Stack initialisation
    ldi r24,LOW(RAMEND)
    out SPL,r24
    ldi r24,HIGH(RAMEND)
    out SPH,r24
    clr r24

    ; Initialize PB1 (OC1A) as output
    ser r24
    out DDRB, r24
    
    ; Maybe the ones with zeros could be deleted ...
    
    ; Initialize Timer1 -> TCCR1A in FAST PWM, 8-bit
    ; The OC1A output of PWM (non-inverting) timer1 will be connected to the PB1 
    ldi r24, (0 << WGM11) | (1 << WGM10) | (1 << COM1A1) | (0 << COM1A0)
    sts TCCR1A, r24
    
    ; f_PWM = 16MHz / (prescaler * 256) 
    ; 256 because we have 8-bit timer = (1 + TOP), where TOP = 255
    ; So if we choose prescaler = 1 (CS10 = 1), f_PWM = 62,5KHz
    ; Initialize Timer1 -> TCCR1B in FAST PWM, 8-bit
    ldi r24, (1 << CS10) | (1 << WGM12)
    sts TCCR1B, r24
    
   
   
    
    ; Initialize PD3, PD4 as inputs
    ldi r24, 0xE7
    out DDRD, r24
    clr r24
    out portd,r24
    ser r24
    out ddrc,r24
    clr r24
    
    
    
    
    ldi DC_VALUE, 7		; Value 128 from the table (50%)
    rcall update_PWM
loop:
    in r26, PIND		; Read the state of PORTD
    com r26			; Reverse logic, so now if pressed = 1
    andi r26, 0x18		; Mask for PD3, PD4
    
    cpi r26, 0x18		    ; If both PINs are pressed, do nothing
    breq loop					; Loop again
    ;LDI R31,0xFA
    ;STS OCR1AL,R31
    out portc,DC_VALUE
    
    sbrc r26, 3	; Skip the next instruction if PD3 is clear
    
    rcall increaseDC_triggered	; Jump to 'increaseDC_triggered', return with ret
				; We have reverse logic in input, so if PD3 
				; is pressed, then microprocessor understands it as 0
				; and it does not skip the next operation 
    
      
    sbrc r26, 4			; Skip the next instruction if PD4 is clear
    rcall decreaseDC_triggered	; Jump to 'decreaseDC_triggered', return with ret
       
    rjmp loop
    
; If PD3 is pressed   
increaseDC_triggered:
    cpi DC_VALUE, 13		; Compare the two indexes, and if DC_VALUE is greater
    breq end_increasing		; Don't increase (branch if greater or equal)
    inc DC_VALUE		; Increase the index, means increase another 8% the DC
    push r24
    push r25
    push r26
    push r27
    in r1,sreg
    push r1
    ldi r24,LOW(req)
    ldi r25,HIGH(req)
    rcall wait_x_msec ;3 cycles
    pop r1
    out sreg,r1
    pop r27
    pop r26
    pop r25
    pop r24

    rcall update_PWM		; Go update the value from the table
    
    
    end_increasing:
	ret
    
; If PD4 is pressed  
decreaseDC_triggered: 
    cpi DC_VALUE, 1		; Compare the two indexes, and if DC_VALUE is less
    breq end_decreasing		; Don't decrease (branc if less or equal)
    dec DC_VALUE		; Decrease the index, means decrease another 8% the DC
    
    push r24
    push r25
    push r26
    push r27
    in r1,sreg
    push r1
    ldi r24,LOW(req)
    ldi r25,HIGH(req)
    rcall wait_x_msec ;3 cycles
    pop r1
    out sreg,r1
    pop r27
    pop r26
    pop r25
    pop r24
    
    rcall update_PWM		; Go update the value from the table
    

    end_decreasing:
	ret
    
    

				    ; This label loads from program memory the precomputed values for the PWM Duty Cycle.
				    ; We use DC_VALUE as the index to select the appropriate value each time, which is 
				    ; the written to the OCR1A register -> adjust the brightness of LED PB1
				    ; We use Z register because we address the program memory where we
				    ; have stored the table's values
update_PWM:
    ldi ZH, high(OCR_table)	; Load high byte of table address into ZH
    ldi ZL, low(OCR_table)	; Load low byte of table address into ZL
  
    add ZL, DC_VALUE		; Add the index (DC_VALUE to the low byte of Z)
    
				    ; Is it necessary to adjust the ZH ????????? I think no, because the previous calculation
				    ; won't cause any carry (0-12 indexes need 4-bits, and ZL is 8-bit register)
    
    lpm r10,Z			; Loads the value from program memory LOW (OCR_TABLE) into R0 by default
    out portc,r10
    STS OCR1AL,r10		; Update the OCR1A register with the new value
  
    ret
    
    
; Define a table that contains precomputed values of OCR1A for various Duty Cycles

    
; The previous values we have calculated: 
    ; For 8-bit PWM, Timer1 has a bandwith from 0 to 255 (0xFF)
    ; 2%: OCR1A = 2%*255 = 5
    ; 10%: OCR1A = 10%*255 = 25
    ; 18%: OCR1A = 46
    ; 26%: OCR1A = 66
    ; 34%: OCR1A = 86
    ; 42%: OCR1A = 107
    ; 50%: OCR1A = 128
    ; 58%: OCR1A = 148
    ; 66%: OCR1A = 168 
    ; 74%: OCR1A = 188 
    ; 82%: OCR1A = 209
    ; 90%: OCR1A = 229
    ; 98%: OCR1A = 250

; The indexing of table begins from 0
    
    
wait_x_msec:
ldi r26,LOW(15984);1 cycle
ldi r27,HIGH(15984);1 cycle
helper:
    sbiw r26,4 ;2 cycles
    brne helper ;2 cycles or 1 cycle for the last iteration
;15984 -> helper consumes 15983 cycles
;so after helper we consume totally 15985 cycles

sbiw r24,1 ;2 cycle
breq last_msec ;1 cycle but if last msec 2 cycles

;for all msec except from the last -> 15985 + 2 + 1 = 15988 cycles
    
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop ;10 cycles

;extra 10 cycles -> 15998
    
brne wait_x_msec ;2 cycles total 16000 cycles with this operation

last_msec:
;in the last iteration (last msec) we have 15989 cycles
nop
nop
nop
nop

;extra 4 cycles -> 15993 cycles 
ret ;4 cycles
    
;with ret and rcall we calculated exactly 16000 cycles again
;so in both cases we end up having 16000 cycles -> 1 msec * (desired time) 

