#define F_CPU 16000000UL

#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
#include<stdbool.h>

#define PCA9555_0_ADDRESS 0x40      //A0=A1=A2=0 by hardware
#define TWI_READ 1                  // reading from twi device
#define TWI_WRITE 0                 // writing to twi device
#define SCL_CLOCK 100000L           // twi clock in Hz

//Fscl=Fcpu/(16+2*TWBR0_VALUE*PRESCALER_VALUE)
#define TWBR0_VALUE (((F_CPU/SCL_CLOCK)-16)/2)

// PCA9555 REGISTERS
typedef enum {
    REG_INPUT_0 = 0,
    REG_INPUT_1 = 1,
    REG_OUTPUT_0 = 2,
    REG_OUTPUT_1 = 3,
    REG_POLARITY_INV_0 = 4,
    REG_POLARITY_INV_1 = 5,
    REG_CONFIGURATION_0 = 6,
    REG_CONFIGURATION_1 = 7,
} PCA9555_REGISTERS;

//----------- Master Transmitter/Receiver -------------------
#define TW_START 0x08
#define TW_REP_START 0x10

//---------------- Master Transmitter ----------------------
#define TW_MT_SLA_ACK 0x18
#define TW_MT_SLA_NACK 0x20
#define TW_MT_DATA_ACK 0x28

//---------------- Master Receiver ----------------
#define TW_MR_SLA_ACK 0x40
#define TW_MR_SLA_NACK 0x48
#define TW_MR_DATA_NACK 0x58

#define TW_STATUS_MASK 0b11111000
#define TW_STATUS (TWSR0 & TW_STATUS_MASK)

//initialize TWI clock
void twi_init(void)
{
    TWSR0 = 0;              // PRESCALER_VALUE=1
    TWBR0 = TWBR0_VALUE;    // SCL_CLOCK 100KHz
}

// Read one byte from the twi device ( request more data from device)
unsigned char twi_readAck(void)
{
    TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    while(!(TWCR0 & (1<<TWINT)));   // Wait till TW1 sends ACK back, means job done
    return TWDR0;
}

// Issues a start condition and sends address and transfer direction.
// return 0 = device accessible, 1= failed to access device
unsigned char twi_start(unsigned char address)
{
    uint8_t twi_status;
    // send START condition
    TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    // wait until transmission completed
    while(!(TWCR0 & (1<<TWINT)));
    // check value of TWI Status Register.
    twi_status = TW_STATUS & 0xF8;
    if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) return 1;
    // send device address
    TWDR0 = address;
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    // wail until transmission completed and ACK/NACK has been received
    while(!(TWCR0 & (1<<TWINT)));
    // check value of TWI Status Register.
    twi_status = TW_STATUS & 0xF8;
    if ( (twi_status != TW_MT_SLA_ACK) && (twi_status != TW_MR_SLA_ACK) )
    {
        return 1; // failed to access device
    }
    return 0;
}

// Send start condition, address, transfer direction.
// Use ACK polling to wait until device is ready
void twi_start_wait(unsigned char address)
{
    uint8_t twi_status;
    while ( 1 )
    {
        // send START condition
        TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
        
        // wait until transmission completed
        while(!(TWCR0 & (1<<TWINT)));
        
        // check value of TWI Status Register.
        twi_status = TW_STATUS & 0xF8;
        if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) continue;
        
        // send device address
        TWDR0 = address;
        TWCR0 = (1<<TWINT) | (1<<TWEN);
        
        // wail until transmission completed
        while(!(TWCR0 & (1<<TWINT)));
        
        // check value of TWI Status Register.
        twi_status = TW_STATUS & 0xF8;
        if ( (twi_status == TW_MT_SLA_NACK )||(twi_status ==TW_MR_DATA_NACK) )
        {
            /* device busy, send stop condition to terminate write operation */
            TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
            
            // wait until stop condition is executed and bus released
            while(TWCR0 & (1<<TWSTO));
            
            continue;
        }
        break;
    }
}

// Send one byte to twi device, Return 0 if write successful or 1 if write failed
unsigned char twi_write(unsigned char data)
{
    // send data to the previously addressed device
    TWDR0 = data;
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    // wait until transmission completed
    
    while(!(TWCR0 & (1<<TWINT)));
    if((TW_STATUS & 0xF8) != TW_MT_DATA_ACK) return 1; // write failed
    return 0;
}

// Send repeated start condition, address, transfer direction
//Return: 0 device accessible
// 1 failed to access device
unsigned char twi_rep_start(unsigned char address)
{
    return twi_start(address);
}

// Terminates the data transfer and releases the twi bus
void twi_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    // wait until stop condition is executed and bus released
    while(TWCR0 & (1<<TWSTO));
}

unsigned char twi_readNak(void)
{
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    while(!(TWCR0 & (1<<TWINT)));
    
    return TWDR0;
}

void PCA9555_0_write(PCA9555_REGISTERS reg, uint8_t value)
{
    twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
    twi_write(reg);
    twi_write(value);
    twi_stop();
}

uint8_t PCA9555_0_read(PCA9555_REGISTERS reg)
{
    uint8_t ret_val;
    
    twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
    twi_write(reg);
    twi_rep_start(PCA9555_0_ADDRESS + TWI_READ);
    ret_val = twi_readNak();
    twi_stop();
    
    return ret_val;
}

#define ROW_1_MASK 0xFE // Row 1 low to check only that
#define ROW_2_MASK 0xFD // Row 2 low to check only that
#define ROW_3_MASK 0xFB // Row 3 low to check only that
#define ROW_4_MASK 0xF7 // Row 4 low to check only that

uint8_t scan_row(uint8_t row_to_check)
{
    uint8_t row_mask;
    switch (row_to_check)
    {
        case 1: row_mask = ROW_1_MASK; break;
        case 2: row_mask = ROW_2_MASK; break;
        case 3: row_mask = ROW_3_MASK; break;
        case 4: row_mask = ROW_4_MASK; break;
        default: return 0; // If invalid row
    }
    PCA9555_0_write(REG_OUTPUT_1, row_mask);
    
    uint8_t input = PCA9555_0_read(REG_INPUT_1);    // Read the input
    // Mask to take the column of keypad from input pressed  
    // Return, the shifted to the right, result representing the active columns of the specific row
    return (input & 0xF0) >> 4;                     
}

uint16_t scan_keypad()
{
    uint16_t bottoms_pressed = 0;                   // None pressed at the beginning
    for (uint8_t row = 1; row <= 4; row++)
    {
        uint8_t columns_selected = scan_row(row);   // Get the columns activated from each row
        bottoms_pressed |= columns_selected;        
        
        // For each row, save the columns pressed into the 16-bit bottoms_pressed
        // For row 1, the 4-bit answer will be in the 4 MSB bits of bottoms_pressed
        // For row 2, the 4-bit answer will be in the 4 LSB of the upper half (8-bit) and so on ...
        if (row != 4) {bottoms_pressed = bottoms_pressed << 4;}
        _delay_ms(1);
    }
    return bottoms_pressed; /* e.g if bottoms_pressed = 0111 1011 1101 1110 means that 
                             * from row 1, column 4 is activated
                             * from row 2, column 3 is activated
                             * from row 3, column 2 is activated
                             * from row 4, column 1 is activated
                             */
}

uint16_t pressed_keys_tempo = 0xFFFF;               // First key pressed is 'none', save previous pressed key
uint16_t scan_keypad_rising_edge()
{
    uint16_t pressed_keys = scan_keypad();
    _delay_ms(10);
    uint16_t recheck_pressed_keys = scan_keypad();  // Check again (de-bouncing)
    
    recheck_pressed_keys |= pressed_keys;           // Get rid of the 'bits' that weren't previously pressed
    recheck_pressed_keys |= ~pressed_keys_tempo;    // Compare with the previous pressed keys
    pressed_keys_tempo = pressed_keys;              // Save the current pressed keys into tempo for future use
    return recheck_pressed_keys;                    // Return verified key
}

uint16_t key;
uint8_t keypad_to_ascii()
{
    key = scan_keypad_rising_edge();                // 16-bit 
    
    if (key == 0xFFFF) {return 0x00;}               // Nothing is pressed
    
    uint8_t row1 = (key >> 12) & 0x0F;              // Extract bits 12-15 (Row 1)
    uint8_t row2 = (key >> 8) & 0x0F;               // Extract bits 8-11 (Row 2)
    uint8_t row3 = (key >> 4) & 0x0F;               // Extract bits 4-7 (Row 3)
    uint8_t row4 = key & 0x0F;                      // Extract bits 0-3 (Row 4)

    for (uint8_t row = 1; row <= 4; row++)
    {
        switch (row)
        {
            case 1: 
                if (row1 == 0b00001110) {return 0b11101110; break;}     // "*"
                else if (row1 == 0b00001101) {return 0b11011110; break;}// "0"
                else if (row1 == 0b00001011) {return 0b10111110; break;}// "#"
                else if (row1 == 0b00000111) {return 0b01111110; break;}// "D"
            
            case 2: 
                if (row2 == 0b00001110) {return 0b11101101; break;}     // "7"
                else if (row2 == 0b00001101) {return 0b11011101; break;}// "8"
                else if (row2 == 0b00001011) {return 0b10111101; break;}// "9"
                else if (row2 == 0b00000111) {return 0b01111101; break;}// "C"
                          
            case 3: 
                if (row3 == 0b00001110) {return 0b11101011; break;}     // "4"
                else if (row3 == 0b00001101) {return 0b11011011; break;}// "5"
                else if (row3 == 0b00001011) {return 0b10111011; break;}// "6"
                else if (row3 == 0b00000111) {return 0b01111011; break;}// "B"
            
            case 4: 
                if (row4 == 0b00001110) {return 0b11100111; break;}     // "*"
                else if (row4 == 0b00001101) {return 0b11010111; break;}// "0"
                else if (row4 == 0b00001011) {return 0b10110111; break;}// "#"
                else if (row4 == 0b00000111) {return 0b01110111; break;}// "D"
        }
    }
}

void write_2_nibbles(uint8_t lcd_data) {
    uint8_t temp;

    // Send the high nibble
    temp = (PIND & 0x0F) | (lcd_data & 0xF0);  // Keep lower 4 bits of PIND and set high nibble of lcd_data
    PORTD = temp;                              // Output the high nibble to PORTD
    PORTD |= (1 << PD3);                       // Enable pulse high
    _delay_us(1);                              // Small delay to let the signal settle
    PORTD &= ~(1 << PD3);                      // Enable pulse low

    // Send the low nibble
    lcd_data <<= 4;                            // Move low nibble to high nibble position
    temp = (PIND & 0x0F) | (lcd_data & 0xF0);  // Keep lower 4 bits of PIND and set high nibble of new lcd_data
    PORTD = temp;                              // Output the low nibble to PORTD
    PORTD |= (1 << PD3);                       // Enable pulse high
    _delay_us(1);                              // Small delay to let the signal settle
    PORTD &= ~(1 << PD3);                      // Enable pulse low
}

void lcd_data(uint8_t data)
{
    PORTD |= 0x04;              // LCD_RS = 1, (PD2 = 1) -> For Data
    write_2_nibbles(data);      // Send data
    _delay_ms(5);            
    return;
}
void lcd_command(uint8_t data)
{
    PORTD &= 0xFB;              // LCD_RS = 0, (PD2 = 0) -> For Instruction
    write_2_nibbles(data);      // Send data
    _delay_ms(5);             
    return;
}

void lcd_clear_display()
{
    uint8_t clear_disp = 0x01;  // Clear display command
    lcd_command(clear_disp);    
    _delay_ms(5);               // Wait 5 msec
    return;
}

void lcd_init() 
{
    _delay_ms(200);

    // Send 0x30 command to set 8-bit mode (three times)
    PORTD = 0x30;              // Set command to switch to 8-bit mode
    PORTD |= (1 << PD3);       // Enable pulse
    _delay_us(1);
    PORTD &= ~(1 << PD3);      // Clear enable
    _delay_us(30);            // Wait 250 Âµs

    PORTD = 0x30;              // Repeat command to ensure mode set
    PORTD |= (1 << PD3);
    _delay_us(1);
    PORTD &= ~(1 << PD3);
    _delay_us(30);

    PORTD = 0x30;              // Repeat once more
    PORTD |= (1 << PD3);
    _delay_us(1);
    PORTD &= ~(1 << PD3);
    _delay_us(30);

    // Send 0x20 command to switch to 4-bit mode
    PORTD = 0x20;
    PORTD |= (1 << PD3);
    _delay_us(1);
    PORTD &= ~(1 << PD3);
    _delay_us(30);

    // Set 4-bit mode, 2 lines, 5x8 dots
    lcd_command(0x28);

    // Display ON, Cursor OFF
    lcd_command(0x0C);

    // Clear display
    lcd_clear_display();

    // Entry mode: Increment cursor, no display shift
    lcd_command(0x06);
}


int main(){
    //DDRB = 0xff;
    //DDRC = 0xff;
    DDRD = 0xFF;
   
    twi_init();
    
    PCA9555_0_write(REG_CONFIGURATION_1, 0xF0);
    PCA9555_0_write(REG_CONFIGURATION_0, 0x00);
    
    lcd_init();
    
    while(1)
    {
        //lcd_clear_display();
        lcd_command(0x80);
        
        uint8_t input = keypad_to_ascii();           // Read input 
        
        if (input == 0b01110111) lcd_data('A');      // Pressed 'A'
        else if (input == 0b10110111) lcd_data('3'); // Pressed '3'
        else if (input == 0b11010111) lcd_data('2'); // Pressed '2'
        else if (input == 0b11100111) lcd_data('1'); // Pressed '1'
        else if (input == 0b01111011) lcd_data('B'); // Pressed 'B'
        else if (input == 0b10111011) lcd_data('6'); // Pressed '6'
        else if (input == 0b11011011) lcd_data('5'); // Pressed '5'
        else if (input == 0b11101011) lcd_data('4'); // Pressed '4'
        else if (input == 0b01111101) lcd_data('C'); // Pressed 'C'
        else if (input == 0b10111101) lcd_data('9'); // Pressed '9'
        else if (input == 0b11011101) lcd_data('8'); // Pressed '8'
        else if (input == 0b11101101) lcd_data('7'); // Pressed '7'
        else if (input == 0b01111110) lcd_data('D'); // Pressed 'D'
        else if (input == 0b10111110) lcd_data('#'); // Pressed '#'
        else if (input == 0b11011110) lcd_data('0'); // Pressed '0'
        else if (input == 0b11101110) lcd_data('*'); // Pressed '*'
        //else lcd_clear_display(); // None of the desired keys is pressed
        //_delay_ms(2000);
    }
}
